// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  password     String
  salt         String
  isSystemUser Boolean  @default(false)
  isFirstLogin Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Organizations {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganizationUsers {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Tasks {
  id             String          @id @default(cuid())
  outId          String?         @unique
  llmId          String
  prompt         String          @db.Text
  status         String          @default("pending")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  organizationId String
  steps          TaskProcesses[]
}

model TaskProcesses {
  id             String   @id @default(cuid())
  taskId         String
  index          Int
  step           Int
  result         String   @db.Text
  type           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  task Tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId, organizationId])
}

model LlmConfigs {
  id             String   @id @default(cuid())
  type           String
  model          String
  baseUrl        String
  apiKey         String
  maxTokens      Int
  maxInputTokens Int?
  temperature    Float
  apiType        String
  apiVersion     String?
  isActive       Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  organizationId String

  @@unique([type, organizationId])
}
