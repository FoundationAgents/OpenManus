#!/usr/bin/env python3
"""
Launcher simplificado do OpenManus sem depend√™ncias do Daytona.
Este launcher usa apenas os adapters de sandbox open source implementados.
"""

import asyncio
import sys
from pathlib import Path

# Add the project root to the Python path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

from app.config import Config
from app.logger import logger
from app.sandbox.adapters.factory import SandboxFactory
from app.sandbox.adapters.unified_client import UnifiedSandboxClient


async def demo_sandbox_system():
    """Demonstra√ß√£o do sistema de sandbox open source."""
    print("üöÄ OpenManus - Sistema de Sandbox Open Source")
    print("=" * 50)

    try:
        # Caregar configura√ß√£o
        config = Config()
        sandbox_config = config.sandbox

        print(f"üìã Configura√ß√£o carregada:")
        print(f"   Backend: {sandbox_config.backend}")
        print(f"   Use sandbox: {sandbox_config.use_sandbox}")
        print(f"   Image: {sandbox_config.image}")
        print()

        # Verificar backends dispon√≠veis
        available = SandboxFactory.get_available_adapters()
        print(f"üîß Backends dispon√≠veis: {', '.join(available)}")

        # Auto-detectar melhor backend
        best = SandboxFactory.auto_detect_backend()
        print(f"üéØ Melhor backend detectado: {best}")
        print()

        # Testar o backend configurado
        backend = sandbox_config.backend or best
        print(f"üß™ Testando backend: {backend}")

        client = UnifiedSandboxClient(backend)

        async with client.sandbox_context() as sandbox_id:
            print(f"‚úÖ Sandbox criado: {sandbox_id}")

            # Teste b√°sico
            result = await client.execute(sandbox_id, "echo 'OpenManus funcionando!'")
            print(f"üíª Sa√≠da: {result.stdout.strip()}")

            # Teste Python
            py_result = await client.execute(
                sandbox_id, "python3 -c \"print('Python:', __import__('sys').version)\""
            )
            print(f"üêç {py_result.stdout.strip()}")

            # Teste de arquivo
            await client.write_file(
                sandbox_id,
                "/tmp/openmanus_test.txt",
                "OpenManus com sandbox open source funcionando!",
            )

            content = await client.read_file(sandbox_id, "/tmp/openmanus_test.txt")
            print(f"üìÑ Arquivo: {content.strip()}")

            # Listar arquivos
            files = await client.list_files(sandbox_id, "/tmp")
            print(f"üìÅ Arquivos em /tmp: {len(files)} encontrados")

        print(f"üéâ Teste do backend {backend} conclu√≠do com sucesso!")

    except Exception as e:
        logger.error(f"Erro na demonstra√ß√£o: {e}")
        print(f"‚ùå Erro: {e}")
        return False

    return True


async def interactive_mode():
    """Modo interativo simples para testar comandos."""
    print("üîß Modo Interativo OpenManus")
    print("Digite comandos para executar no sandbox (ou 'quit' para sair)")
    print("-" * 50)

    try:
        config = Config()
        backend = config.sandbox.backend or "docker"

        client = UnifiedSandboxClient(backend)

        async with client.sandbox_context() as sandbox_id:
            print(f"üì¶ Sandbox {backend} criado: {sandbox_id}")
            print("Digite seus comandos:")

            while True:
                try:
                    command = input("üî¥ > ").strip()

                    if command.lower() in ["quit", "exit", "q"]:
                        break

                    if not command:
                        continue

                    if command.startswith("write "):
                        # Comando especial para escrever arquivo
                        # Formato: write /path/to/file content here
                        parts = command[6:].split(" ", 1)
                        if len(parts) == 2:
                            path, content = parts
                            await client.write_file(sandbox_id, path, content)
                            print(f"‚úÖ Arquivo {path} criado")
                        else:
                            print("‚ùå Uso: write /path/to/file content")
                        continue

                    if command.startswith("read "):
                        # Comando especial para ler arquivo
                        path = command[5:].strip()
                        try:
                            content = await client.read_file(sandbox_id, path)
                            print(f"üìÑ {path}:")
                            print(content)
                        except Exception as e:
                            print(f"‚ùå Erro lendo {path}: {e}")
                        continue

                    if command.startswith("ls "):
                        # Comando especial para listar arquivos
                        path = command[3:].strip() or "/"
                        try:
                            files = await client.list_files(sandbox_id, path)
                            print(f"üìÅ {path}:")
                            for f in files:
                                print(f"  {f}")
                        except Exception as e:
                            print(f"‚ùå Erro listando {path}: {e}")
                        continue

                    # Comando normal
                    result = await client.execute(sandbox_id, command)

                    if result.stdout:
                        print(result.stdout.rstrip())
                    if result.stderr:
                        print(f"‚ùå Erro: {result.stderr.rstrip()}")
                    if result.exit_code != 0:
                        print(f"‚ö†Ô∏è  Exit code: {result.exit_code}")

                except KeyboardInterrupt:
                    print("\\nInterrompido pelo usu√°rio")
                    break
                except EOFError:
                    print("\\nSaindo...")
                    break
                except Exception as e:
                    print(f"‚ùå Erro: {e}")

    except Exception as e:
        print(f"‚ùå Erro no modo interativo: {e}")


def print_help():
    """Mostra ajuda de uso."""
    print(
        """
üöÄ OpenManus - Launcher Sandbox Open Source

Uso: python simple_launcher.py [op√ß√£o]

Op√ß√µes:
  demo          Demonstra√ß√£o do sistema de sandbox
  interactive   Modo interativo para executar comandos
  test          Executar testes dos backends
  help          Mostrar esta ajuda

Exemplos:
  python simple_launcher.py demo
  python simple_launcher.py interactive
  python simple_launcher.py test

Backends dispon√≠veis:
  - docker  : Local, gratuito
  - gitpod  : Self-hosted (requer GITPOD_TOKEN)
  - e2b     : Cloud (requer E2B_API_KEY)

Configure em config/config.toml:
  [sandbox]
  backend = "docker"
  use_sandbox = true
"""
    )


async def run_tests():
    """Executar testes dos backends."""
    print("üß™ Executando testes dos backends...")

    import subprocess

    result = subprocess.run(
        [sys.executable, "scripts/test_sandbox_backends.py"], cwd=PROJECT_ROOT
    )

    return result.returncode == 0


async def main():
    """Fun√ß√£o principal."""
    if len(sys.argv) < 2:
        await demo_sandbox_system()
        return

    command = sys.argv[1].lower()

    if command == "demo":
        success = await demo_sandbox_system()
        sys.exit(0 if success else 1)

    elif command == "interactive":
        await interactive_mode()

    elif command == "test":
        success = await run_tests()
        sys.exit(0 if success else 1)

    elif command in ["help", "-h", "--help"]:
        print_help()

    else:
        print(f"‚ùå Comando desconhecido: {command}")
        print("Use 'help' para ver comandos dispon√≠veis")
        sys.exit(1)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\\nüõë Interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"Erro fatal: {e}")
        print(f"üí• Erro fatal: {e}")
        sys.exit(1)
